
Pronic Number Program  : A number is said to be a pronic number if product of two consecutive integers is equal to the number, is called a pronic number. Example- 42 is said to be a pronic number, 42=6×7, here 6 and 7 are consecutive integers
ans
import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
	Scanner l = new Scanner(System.in);
	int n= l.nextInt();
	for(int i=0;i*(i+1)<=n;i++)
	{
	
	
	
	if(i*(i+1)==n){
	    System.out.println(n+"pronic number");
	}
	
	}
	}
}
2)Repunit Numbers: Numbers consisting of repeated units of 1. For example, 1, 11, 111, 1111, …
import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
	Scanner l = new Scanner(System.in);
	int n= l.nextInt();
	String rep=" ";

	for(int i=1;i<=n;i++)
	{
	    rep+="1";
		System.out.println(rep);
	
	

	}
}
}
3)Oneful Pairs

Chef defines a pair of positive integers (a,b)  to be a Oneful PairOneful Pair, if

a+b+(a⋅b)=111 

For example, (1,55)  is a Oneful PairOneful Pair, since 1+55+(1⋅55)=56+55=111.
But (1,56)  is not a Oneful PairOneful Pair, since 1+56+(1⋅56)=57+56=113≠111.

Given two positive integers a  and b , output Yes if they are a Oneful PairOneful Pair. And No otherwise.
import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
	Scanner l = new Scanner(System.in);
	int a= l.nextInt();
	int b= l.nextInt();
	int n= l.nextInt();
	int ttal=0;
        int o=0;
	for(int i=0;i<=n;i++)
	{
	    int sum=0;
	    sum=a+b;
	    int mul=1;
	    mul=a*b;
	    
	    ttal=sum+(mul);
	

	}
	if(o==ttal){
	System.out.println(ttal+"Yes");
	}
	else{
	    System.out.println(ttal+"No");
	}
}
}
4)The Attack of Knight

While playing chess, Chef noticed that it is generally advantageous for him if his knight attacks two or more of his opponent's pieces simultaneously. To practice this skill, Chef decided to perform the following exercise:

Take an empty 8 × 8 8×8 chessboard, and any two white pieces. Choose two distinct cells ( X 1 , Y 1 ), (X 2 ​ ,Y 2 ​ ) and place the pieces on those cells (the cell at the intersection of the  i-th row and  j-th column is denoted ( i , j )). Check if there exists an empty cell where he can place a black knight in such a way that the knight attacks both the white pieces simultaneously.

Given the position of the two white pieces  (X1,Y1) (X2,Y2) print 'YES' if there exists an empty cell where he can place a black knight in such a way that the knight attacks both the white pieces simultaneously, otherwise print NO.

For reference, a knight attacks a piece placed in a cell that is:

One square horizontally and two squares vertically away from it, or
One square vertically and two squares horizontally away from it

Input Format:

The first line of input will contain an integer T T — the number of test cases. The description of T T test cases follows. The first line of each test case contains two space-separated integers X 1 ​ and Y 1 ​ , the position of first white piece. The second line of each test case contains two space-separated integers X2 ​ and Y 2 ​ , the position of second white piece.

Output Format:

For each test case, output the answer on a new line — YES if there exists an empty cell where Chef can place a black knight in such a way that the knight attacks both the white pieces simultaneously, and NO otherwise. You may print each character of YES and NO in either uppercase or lowercase (for example, yes, yEs, Yes will be considered identical).

Sample Test Case:

Input:
4
1 1
1 2
1 1
1 3
1 1
1 4
1 1
1 5

Output:
NO
YES
NO
YES

import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
	Scanner l = new Scanner(System.in);
	int T= l.nextInt();
	  int[] dx = {-2, -2, -1, -1, 1, 1, 2, 2};
        int[] dy = {-1, 1, -2, 2, -2, 2, -1, 1};

        
        for ( int t = 0; t < T; t++) {
            int x1 = l.nextInt();
            int y1 = l.nextInt();
            int x2 = l.nextInt();
            int y2 = l.nextInt();
            
            String result = "NO";
            
            // Check each possible move from the first position
            for (int i = 0; i < 8; i++) {
                int newX1 = x1 + dx[i];
                int newY1 = y1 + dy[i];
                
                // Check each possible move from the second position
                for (int j = 0; j < 8; j++) {
                    int newX2 = x2 + dx[j];
                    int newY2 = y2 + dy[j];
                    
                    // If both positions can move to the same cell
                    if (newX1 == newX2 && newY1 == newY2) {
                        result = "YES";
                        break;
                    }
                }

                if (result.equals("YES")) {
                    break;
                }
            }
            
            System.out.println(result);
        }
}
}
split the array
import java.util.Scanner;
public class Main
{
	public static void main(String[] args) {
	Scanner p=new Scanner(System.in);
	int n=p.nextInt();
	int []a=new int[n];
	for(int i=0;i<n;i++){
	    a[i]=p.nextInt();
	}
	int mid=n/2;
	int []r=new int[n];
	for(int i=0;i<n-mid;i++){
	    r[i]=a[mid+1];
	}
	for(int i=0;i<mid;i++){
	    r[n-mid+i]=a[i];
	}
	 System.out.println("Array after splitting and adding the first half after the second half:");
        for (int i = 0; i < n; i++) {
            System.out.print(r[i] + " ");
	}
	}
}